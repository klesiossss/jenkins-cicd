import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import java.lang.ProcessBuilder


plugins {
    id 'base'
    id 'com.palantir.docker' version '0.31.0'
    id 'com.palantir.docker-run' version '0.31.0'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
}

project.version = scmVersion.version

docker {
    name "${project.name}:${project.version}"
    files "plugins.txt", "seedJob.xml"
}








def osName = System.properties['os.name'].toLowerCase()

def process

if (osName.contains('windows')) {
    process = "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock alpine stat -c %g /var/run/docker.sock".execute()
} else if (osName.contains('linux')) {
    process = "stat -c %g /var/run/docker.sock".execute()
} else if (osName.contains('mac')) {
     process = "stat -f '%Sg' /var/run/docker.sock".execute()

} else {
    throw new GradleException("Unsupported operating system. No way to find group of /var/run/docker.sock.")
}




def out = new ByteArrayOutputStream()
process.waitForProcessOutput(out, System.err)
String dockerSockGroupId = out.toString().trim()

String extraPrefix = DefaultNativePlatform.getCurrentOperatingSystem().isWindows() ? '/' : ''
dockerRun {
    name "${project.name}"
    image "${project.name}:${project.version}"
    ports '8080:8080'
    clean true
    daemonize false
    arguments '-v', "$extraPrefix/var/run/docker.sock:/var/run/docker.sock", '--group-add', dockerSockGroupId
}